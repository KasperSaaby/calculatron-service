// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/KasperSaaby/calculatron-service/generated/models"
)

// PostCalculatorOKCode is the HTTP code returned for type PostCalculatorOK
const PostCalculatorOKCode int = 200

/*
PostCalculatorOK OK

swagger:response postCalculatorOK
*/
type PostCalculatorOK struct {

	/*
	  In: Body
	*/
	Payload *models.PostCalculateResponse `json:"body,omitempty"`
}

// NewPostCalculatorOK creates PostCalculatorOK with default headers values
func NewPostCalculatorOK() *PostCalculatorOK {

	return &PostCalculatorOK{}
}

// WithPayload adds the payload to the post calculator o k response
func (o *PostCalculatorOK) WithPayload(payload *models.PostCalculateResponse) *PostCalculatorOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post calculator o k response
func (o *PostCalculatorOK) SetPayload(payload *models.PostCalculateResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostCalculatorOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostCalculatorBadRequestCode is the HTTP code returned for type PostCalculatorBadRequest
const PostCalculatorBadRequestCode int = 400

/*
PostCalculatorBadRequest Client error

swagger:response postCalculatorBadRequest
*/
type PostCalculatorBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorModel `json:"body,omitempty"`
}

// NewPostCalculatorBadRequest creates PostCalculatorBadRequest with default headers values
func NewPostCalculatorBadRequest() *PostCalculatorBadRequest {

	return &PostCalculatorBadRequest{}
}

// WithPayload adds the payload to the post calculator bad request response
func (o *PostCalculatorBadRequest) WithPayload(payload *models.ErrorModel) *PostCalculatorBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post calculator bad request response
func (o *PostCalculatorBadRequest) SetPayload(payload *models.ErrorModel) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostCalculatorBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostCalculatorInternalServerErrorCode is the HTTP code returned for type PostCalculatorInternalServerError
const PostCalculatorInternalServerErrorCode int = 500

/*
PostCalculatorInternalServerError Internal error

swagger:response postCalculatorInternalServerError
*/
type PostCalculatorInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorModel `json:"body,omitempty"`
}

// NewPostCalculatorInternalServerError creates PostCalculatorInternalServerError with default headers values
func NewPostCalculatorInternalServerError() *PostCalculatorInternalServerError {

	return &PostCalculatorInternalServerError{}
}

// WithPayload adds the payload to the post calculator internal server error response
func (o *PostCalculatorInternalServerError) WithPayload(payload *models.ErrorModel) *PostCalculatorInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post calculator internal server error response
func (o *PostCalculatorInternalServerError) SetPayload(payload *models.ErrorModel) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostCalculatorInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
