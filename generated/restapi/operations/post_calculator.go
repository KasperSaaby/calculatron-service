// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostCalculatorHandlerFunc turns a function with the right signature into a post calculator handler
type PostCalculatorHandlerFunc func(PostCalculatorParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostCalculatorHandlerFunc) Handle(params PostCalculatorParams) middleware.Responder {
	return fn(params)
}

// PostCalculatorHandler interface for that can handle valid post calculator params
type PostCalculatorHandler interface {
	Handle(PostCalculatorParams) middleware.Responder
}

// NewPostCalculator creates a new http.Handler for the post calculator operation
func NewPostCalculator(ctx *middleware.Context, handler PostCalculatorHandler) *PostCalculator {
	return &PostCalculator{Context: ctx, Handler: handler}
}

/*
	PostCalculator swagger:route POST /v1/calculate postCalculator

Calculator
*/
type PostCalculator struct {
	Context *middleware.Context
	Handler PostCalculatorHandler
}

func (o *PostCalculator) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostCalculatorParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
